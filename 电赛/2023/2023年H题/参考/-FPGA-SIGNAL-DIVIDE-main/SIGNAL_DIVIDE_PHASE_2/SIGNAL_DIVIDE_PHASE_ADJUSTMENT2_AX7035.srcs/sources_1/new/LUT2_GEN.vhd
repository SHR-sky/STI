LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
USE IEEE.STD_LOGIC_SIGNED.ALL;

ENTITY LUT2_GEN IS 
PORT(
  ACLK:IN STD_LOGIC;
  ADDR:IN STD_LOGIC_VECTOR(15 DOWNTO 0);
  DOUT:OUT STD_LOGIC_VECTOR(23 DOWNTO 0)
);
END ENTITY;

ARCHITECTURE BEHAVE OF LUT2_GEN IS 

TYPE LUT_TYPE IS ARRAY (0 TO 511) OF STD_LOGIC_VECTOR(23 DOWNTO 0);
SIGNAL LUT2:LUT_TYPE:= (
  "100000100000000000000000",
  "111100101001010001101010",
  "101110010100010111000000",
  "101001100010100110001001",
  "100111001001100111110000",
  "100101101101110000101111",
  "100100110000011101011010",
  "100100000100100111100111",
  "100011100011101100010001",
  "100011001010000010100011",
  "100010110101011110110010",
  "100010100100101000000010",
  "100010010110100011000101",
  "100010001010100110110111",
  "100010000000010110000101",
  "100001110111011011001111",
  "100001101111100110001110",
  "100001101000101010101101",
  "100001100010011111000110",
  "100001011100111011110100",
  "100001010111111010110101",
  "100001010011010111001110",
  "100001001111001100111110",
  "100001001011011000110010",
  "100001000111110111111000",
  "100001000100100111111100",
  "100001000001100111000001",
  "100000111110110011011011",
  "100000111100001011101110",
  "100000111001101110101100",
  "100000110111011011001111",
  "100000110101010000011100",
  "100000110011001101011111",
  "100000110001010001101001",
  "100000101111011100010010",
  "100000101101101100110110",
  "100000101100000010110101",
  "100000101010011101110010",
  "100000101000111101010100",
  "100000100111100001000100",
  "100000100110001000101101",
  "100000100100110011111101",
  "100000100011100010100010",
  "100000100010010100001101",
  "100000100001001000110001",
  "100000100000000000000000",
  "100000011110111001101110",
  "100000011101110101110010",
  "100000011100110100000001",
  "100000011011110100010011",
  "100000011010110110011110",
  "100000011001111010011100",
  "100000011001000000000100",
  "100000011000000111010001",
  "100000010111001111111101",
  "100000010110011010000001",
  "100000010101100101011001",
  "100000010100110001111111",
  "100000010011111111101110",
  "100000010011001110100100",
  "100000010010011110011010",
  "100000010001101111001110",
  "100000010001000000111100",
  "100000010000010011100000",
  "100000001111100110111000",
  "100000001110111010111111",
  "100000001110001111110101",
  "100000001101100101010100",
  "100000001100111011011100",
  "100000001100010010001001",
  "100000001011101001011010",
  "100000001011000001001011",
  "100000001010011001011011",
  "100000001001110010001000",
  "100000001001001011010000",
  "100000001000100100110000",
  "100000000111111110100111",
  "100000000111011000110100",
  "100000000110110011010100",
  "100000000110001110000101",
  "100000000101101001000111",
  "100000000101000100010111",
  "100000000100011111110100",
  "100000000011111011011101",
  "100000000011010111010000",
  "100000000010110011001011",
  "100000000010001111001101",
  "100000000001101011010101",
  "100000000001000111100001",
  "100000000000100011101111",
  "000000000000000000000000",
  "000000000000100011101111",
  "000000000001000111100001",
  "000000000001101011010101",
  "000000000010001111001101",
  "000000000010110011001011",
  "000000000011010111010000",
  "000000000011111011011101",
  "000000000100011111110100",
  "000000000101000100010111",
  "000000000101101001000111",
  "000000000110001110000101",
  "000000000110110011010100",
  "000000000111011000110100",
  "000000000111111110100111",
  "000000001000100100110000",
  "000000001001001011010000",
  "000000001001110010001000",
  "000000001010011001011011",
  "000000001011000001001011",
  "000000001011101001011010",
  "000000001100010010001001",
  "000000001100111011011100",
  "000000001101100101010100",
  "000000001110001111110101",
  "000000001110111010111111",
  "000000001111100110111000",
  "000000010000010011100000",
  "000000010001000000111100",
  "000000010001101111001110",
  "000000010010011110011010",
  "000000010011001110100100",
  "000000010011111111101110",
  "000000010100110001111111",
  "000000010101100101011001",
  "000000010110011010000001",
  "000000010111001111111101",
  "000000011000000111010001",
  "000000011001000000000100",
  "000000011001111010011100",
  "000000011010110110011110",
  "000000011011110100010011",
  "000000011100110100000001",
  "000000011101110101110010",
  "000000011110111001101110",
  "000000100000000000000000",
  "000000100001001000110001",
  "000000100010010100001101",
  "000000100011100010100010",
  "000000100100110011111101",
  "000000100110001000101101",
  "000000100111100001000100",
  "000000101000111101010100",
  "000000101010011101110010",
  "000000101100000010110101",
  "000000101101101100110110",
  "000000101111011100010010",
  "000000110001010001101001",
  "000000110011001101011111",
  "000000110101010000011100",
  "000000110111011011001111",
  "000000111001101110101100",
  "000000111100001011101110",
  "000000111110110011011011",
  "000001000001100111000001",
  "000001000100100111111100",
  "000001000111110111111000",
  "000001001011011000110010",
  "000001001111001100111110",
  "000001010011010111001110",
  "000001010111111010110101",
  "000001011100111011110100",
  "000001100010011111000110",
  "000001101000101010101101",
  "000001101111100110001110",
  "000001110111011011001111",
  "000010000000010110000101",
  "000010001010100110110111",
  "000010010110100011000101",
  "000010100100101000000010",
  "000010110101011110110010",
  "000011001010000010100011",
  "000011100011101100010001",
  "000100000100100111100111",
  "000100110000011101011010",
  "000101101101110000101111",
  "000111001001100111110000",
  "001001100010100110001001",
  "001110010100010111000000",
  "011100101001010001101010",
  "000000100000000000000000",
  OTHERS => (OTHERS => '0')
);

ATTRIBUTE ROM_STYLE:STRING;
ATTRIBUTE ROM_STYLE OF LUT2:SIGNAL IS "BLOCK";

SIGNAL ADDR_R:INTEGER:= 0;

SIGNAL LUT_OUT:STD_LOGIC_VECTOR(23 DOWNTO 0):= (OTHERS => '0');

BEGIN
  
  ADDR_R <= CONV_INTEGER(ADDR) WHEN ADDR <= 180 ELSE
            CONV_INTEGER(0);
  
--  DOUT <= LUT_OUT WHEN (ADDR_R >= 0 AND ADDR_R <= 90) OR (ADDR_R >= 181 AND ADDR_R <= 359) OR ADDR_R = 90 OR ADDR_R = 270 ELSE
--          - LUT_OUT;
  
  DOUT <= CONV_STD_LOGIC_VECTOR(CONV_INTEGER(LUT_OUT(22 DOWNTO 0)),24) WHEN LUT_OUT(23) = '0' ELSE
          CONV_STD_LOGIC_VECTOR(CONV_INTEGER(- LUT_OUT(22 DOWNTO 0)),24);
  
  PROCESS IS BEGIN
  WAIT UNTIL RISING_EDGE(ACLK);
    LUT_OUT <= LUT2(ADDR_R);
  END PROCESS;
  
--  PROCESS IS BEGIN
--  WAIT UNTIL RISING_EDGE(ACLK);
--    IF (ADDR_R >= 0 AND ADDR_R <= 90) OR (ADDR_R >= 181 AND ADDR_R <= 359) OR ADDR_R = 90 OR ADDR_R = 270 THEN
--      DOUT <= LUT2(ADDR_R);
--    ELSE
--      DOUT <= - LUT2(ADDR_R);
----      DOUT <= CONV_STD_LOGIC_VECTOR(CONV_INTEGER(- LUT2(ADDR_R)),24);
--    END IF;
--  END PROCESS;

END ARCHITECTURE;